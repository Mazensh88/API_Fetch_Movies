{"version":3,"sources":["AppReducer.js","GlobalState.js","ResultCard.js","MovieControls.js","MovieCard.js","App.js","reportWebVitals.js","index.js"],"names":["state","action","type","movielist","payload","initialState","localStorage","getItem","JSON","parse","GlobalContext","createContext","GlobalProvider","props","useReducer","AppReducer","dispatch","useEffect","setItem","stringify","Provider","value","addMovieToSelectedList","movie","children","ResultCard","useContext","movielistDisapled","removeMovieList","find","o","imdbID","Title","disabled","onClick","MovieControls","removeMovieFromWatchlist","className","id","MovieCard","App","useState","query","setQuery","response","setResponse","placeholder","onChange","e","preventDefault","target","fetch","then","res","json","data","Response","Search","length","map","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f34ca3ce.chunk.js","sourcesContent":["export default (state, action) => {\n  switch (action.type) {\n    case \"ADD_MOVIE_TO_MOVIELIST\":\n      return{\n        ...state,\n        movielist: [action.payload, ...state.movielist]\n      };\n    \n    default:\n      return state;\n  }\n\n};","import React, { createContext, useReducer, useEffect } from \"react\";\r\n\r\nimport AppReducer from \"./AppReducer\";\r\n\r\n// initial state\r\nconst initialState = {\r\n    movielist:  localStorage.getItem('movielist') ? JSON.parse(localStorage.getItem('movielist')): [],\r\n    \r\n  \r\n};\r\n\r\n// create context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n// provider components\r\nexport const GlobalProvider  = (props) => {\r\n    \r\n    const [state, dispatch] = useReducer(AppReducer, initialState);\r\n    \r\n    useEffect(() =>{\r\n        localStorage.setItem('movielist', JSON.stringify(state.movielist));\r\n    }, [state]);\r\n    //actions\r\n    const addMovieToSelectedList =(movie) => {\r\n        dispatch({type: \"ADD_MOVIE_TO_MOVIELIST\", payload: movie});\r\n    }\r\n\r\n    \r\n\r\n    return(\r\n        <GlobalContext.Provider value={{\r\n            movielist: state.movielist,\r\n            \r\n            addMovieToSelectedList: addMovieToSelectedList,\r\n            \r\n             }}>\r\n        {props.children}\r\n        </GlobalContext.Provider>\r\n    )\r\n};\r\n","import React, { useContext } from \"react\";\r\n//import Moment from \"react-moment\";\r\nimport {GlobalContext} from './GlobalState';\r\nimport AppReducer from \"./AppReducer\";\r\n\r\nexport const ResultCard = ({ movie }) => {\r\n  const{addMovieToSelectedList,removeMovieList, movielist} = useContext(GlobalContext);\r\n  let storedMovie = movielist.find (o => o.imdbID === movie.imdbID);\r\n\r\n  const movielistDisapled = storedMovie ? true : false;\r\n\r\n  return (\r\n    \r\n    <div>\r\n        <h3>{movie.Title}\r\n        \r\n        <button\r\n        disabled={movielistDisapled}\r\n        onClick={()=> addMovieToSelectedList(movie)}>\r\n              Nominate\r\n        </button>\r\n       \r\n       \r\n        </h3>\r\n        \r\n        \r\n   </div>\r\n  \r\n  );\r\n};","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"./GlobalState\";\n\n\nexport const MovieControls = ({ type, movie }) => {\n  const {\n    removeMovieFromWatchlist,\n    \n  } = useContext(GlobalContext);\n\n  return(\n  <div className=\"inner-card-controls\">\n  {type === \"movielist\" && (\n    <>\n      \n      <button\n       \n        onClick={() => removeMovieFromWatchlist(movie.id)}\n      >\n        <i className=\"fa-fw fa fa-times\"></i>\n      </button>\n    </>\n  )}\n\n \n   </div>\n  );\n\n};","//import React from \"react\";\nimport { MovieControls } from \"./MovieControls\";\nimport React, { useContext,useState, useEffect } from \"react\";\nimport { GlobalContext } from \"./GlobalState\";\n\n\n\nexport const MovieCard = ({movie, type}) => {\n  const{removeMovieList, movielist} = useContext(GlobalContext);\n \n  return (\n    <div >\n      \n      <h3>{movie.Title}</h3>\n      <MovieControls type={type} movie={movie} > Remove </MovieControls>\n        \n    </div>\n  );\n};","\nimport './App.css';\nimport React from 'react';\nimport {useState, useEffect} from 'react';\nimport {ResultCard} from \"./ResultCard\";\nimport {MovieCard} from \"./MovieCard\";\nimport {GlobalProvider,GlobalContext} from \"./GlobalState\";\nimport { useContext } from 'react';\n \nfunction App() {\n  const {movielist} = useContext(GlobalContext);\n  const [query, setQuery] = useState(\"\");\n  const [response, setResponse] = useState([]);\n\n    const onChange = (e) => {\n    e.preventDefault();\n\n    setQuery(e.target.value);\n    fetch(`http://www.omdbapi.com/?s=${e.target.value}&apikey=bea9b037`)\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.Response === \"True\") {\n          setResponse(data.Search);\n          \n        } else {\n          setResponse([]);\n        }\n      });\n  };\n\n\n\n  return (\n    <div>\n     <GlobalProvider>\n    <div>\n          <div>\n            <input\n              type=\"text\"\n              placeholder=\"Search for a movie\"\n              value={query}\n              onChange={onChange}\n              \n            />\n          </div>\n          <div>\n          {response.length > 0 && (\n            <ul className=\"results\">\n              {response.map((movie, Search)=>(\n                <li key={movie.imdbID}>\n                  <ResultCard movie={movie} />\n                </li>\n              ))}\n            </ul>\n          )}\n          </div>\n    </div> \n    </GlobalProvider>\n    <div>\n      <h1>Nominated </h1>\n      <div>\n      <ul>\n      {movielist.map((movie) =>(\n      <li key={movie.imdbID}>\n        <MovieCard movie={movie} />\n        \n      </li>\n      ))}\n      </ul>\n      </div>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}